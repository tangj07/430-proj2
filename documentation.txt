● What is the purpose of your application? What does it do?
it is to make a recipe blog where users can add, search, and delete recipes.
● How are you using React?
It is to build the front-end as it handles dynamic updates, renders components, and manages state.
○ What components do you have?
besides the login, there is the recipeForm, recipeSearch, recipeList, accountDetails, and dashboard as the five components.
● What data are you storing in MongoDB?
i am storing the accounts(name, password, created date, premium status) and recipes(name, ingredients, steps, owner, created date, premium status).
● What went right in the development of this project?
Components were reusable. State management worked well. 
● What went wrong in the development of this project?
Debugging was time-consuming. Fetching data had issues.
● What did you learn while developing this project?
I learned React hooks and component design. I improved my back-end integration skills. Debugging and error handling became easier.
● If you were to continue, what would you do to improve your application?
I would add recipe favorites, search filters, and images to recipes. 
● If you went above and beyond, how did you do so?
No
● If you used any borrowed code or code fragments, where did you get them from?
What do the code fragments do? Where are they in your code?
account code is similar to domomaker.

Endpoint Documentation:
URL: /getRecipes
Supported Methods: GET
Middleware: Requires Login
Query Params: None
Body Params: None
Description: Retrieves a list of recipes from the database, filtering out premium recipes if the current user is not a premium member. It returns the recipes along with the current user's ID and their premium status.
Return Type(s): JSON

URL: /updatePremiumStatus
Supported Methods: POST
Middleware: Requires Login
Query Params: None
Body Params:
premium (boolean)
Description: Updates the premium status for the logged-in user based on the data provided in the body.
Return Type(s): JSON

URL: /deleteRecipe/:id
Supported Methods: DELETE
Middleware: Requires Login, Requires Recipe Ownership
Query Params: None
Body Params: None
Description: Deletes a recipe from the database by its unique identifier. This can only be done by the user who created the recipe.
Return Type(s): JSON

URL: /login
Supported Methods: POST
Middleware: None
Query Params: None
Body Params:
username (string)
password (string)
Description: Authenticates the user by checking their username and password against the database. If successful, the user’s session is created and the user is logged in.
Return Type(s): JSON

URL: /signup
Supported Methods: POST
Middleware: None
Query Params: None
Body Params:
username (string) 
password (string)
Description: Registers a new user by creating a new account with the provided username and password. The user will be logged in after signing up.
Return Type(s): JSON


img credits:
duck: https://www.cleanpng.com/png-duck-bird-long-bill-webbed-feet-walking-brown-duck-7847450/download-png.html
favicon: https://icons8.com/icon/set/favicon-food/group-decorative
pasta: https://pngtree.com/freepng/pasta-isolated-on-white-background_16312780.html